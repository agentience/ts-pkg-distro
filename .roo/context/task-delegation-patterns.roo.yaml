# Task Delegation Patterns Configuration

title: "Task Delegation Patterns"
description: "Templates and examples for effectively delegating tasks to different modes in the project"

task_delegation_template:
  structure: |
    <new_task>
    <mode>[target mode]</mode>
    <message>
    # Task: [Clear task title]
    
    ## Rules
    [A statement to follow all the rules for the mode, found in markdown files in the folder .roo/rules-{mode}]
    
    ## Context
    [Provide necessary background information and context, including appropriate Jira ticket(s)]
    
    ## Objective
    [Clearly state what needs to be accomplished]
    
    ## Requirements
    [List specific requirements or constraints]
    
    ## Deliverables
    [Specify expected outputs or deliverables]
    
    ## Success Criteria
    [Define what successful completion looks like]
    
    ## Next Steps
    [Indicate what should happen after task completion]
    </message>
    </new_task>

example_delegations:
  - name: "Architect to Code Mode"
    example: |
      <new_task>
      <mode>code</mode>
      <message>
      # Task: Implement User Authentication Flow
      
      ## Rules
      Follow all the rules for Code mode, found in markdown files in the folder .roo/rules-code.
      
      ## Context
      We've decided to use AWS Cognito for authentication. The architecture has been defined in the decision-records.roo.md file. The UI mockups are available in the design system.
      
      ## Objective
      Implement the user authentication flow including sign-up, sign-in, password reset, and email verification.
      
      ## Requirements
      - Must use AWS Amplify libraries for Cognito integration
      - Must follow the existing design system for UI components
      - Must implement proper error handling and validation
      - Must be responsive on all device sizes
      
      ## Deliverables
      - Authentication components (SignUp, SignIn, ForgotPassword, etc.)
      - Integration with AWS Cognito
      - Unit tests for all components
      - Documentation of the implementation
      
      ## Success Criteria
      - All authentication flows work as expected
      - UI matches the design mockups
      - Tests pass with >90% coverage
      - Code follows project standards and patterns
      
      ## Next Steps
      After implementation, Debug mode will verify the authentication flows and test edge cases.
      </message>
      </new_task>
  
  - name: "Boomerang to Debug Mode"
    example: |
      <new_task>
      <mode>debug</mode>
      <message>
      # Task: Diagnose Performance Issue in Dashboard
      
      ## Rules
      Follow all the rules for Debug mode, found in markdown files in the folder .roo/rules-debug.
      
      ## Context
      Users have reported slow loading times on the dashboard page. The issue appears to be intermittent and more pronounced when there are many data points to display. Code mode has implemented the dashboard using React with data fetching from our GraphQL API.
      
      ## Objective
      Diagnose the root cause of the performance issue and identify potential solutions.
      
      ## Requirements
      - Use performance profiling tools to identify bottlenecks
      - Consider both frontend and backend performance
      - Document findings with evidence
      - Prioritize potential solutions based on impact and effort
      
      ## Deliverables
      - Performance analysis report
      - Identified bottlenecks with supporting evidence
      - Recommended solutions with priority order
      - Any quick fixes that can be implemented immediately
      
      ## Success Criteria
      - Clear identification of the root cause(s)
      - Evidence-based analysis with metrics
      - Actionable recommendations for improvement
      - Implementation plan for the recommended solutions
      
      ## Next Steps
      After diagnosis, Code mode will implement the recommended solutions based on your findings.
      </message>
      </new_task>
  
  - name: "Boomerang to Release Engineer Mode"
    example: |
      <new_task>
      <mode>release-engineer</mode>
      <message>
      # Task: Prepare v1.2.0 Release
      
      ## Rules
      Follow all the rules for Release Engineer mode, found in markdown files in the folder .roo/rules-release-engineer.
      
      ## Context
      We've completed development of the new features for v1.2.0 as outlined in the product-context.roo.md file. All features have been tested and approved by QA. This is a minor release with several new features and bug fixes.
      
      ## Objective
      Prepare and execute the v1.2.0 release to production.
      
      ## Requirements
      - Follow the release process documented in release-engineering.roo.md
      - Update version numbers in all relevant files
      - Generate release notes based on completed work
      - Coordinate with stakeholders for release timing
      - Ensure all CI/CD pipelines are passing
      
      ## Deliverables
      - Updated version numbers in all relevant files
      - Comprehensive release notes
      - Deployment plan with rollback strategy
      - Post-release verification plan
      
      ## Success Criteria
      - Successful deployment to production
      - All new features functioning as expected
      - No regression issues
      - Documentation updated to reflect new features
      - Stakeholders informed of release completion
      
      ## Next Steps
      After release, Debug mode will perform post-release verification and monitor for any issues.
      </message>
      </new_task>

  - name: "Architect to Frontend Code Mode"
    example: |
      <new_task>
      <mode>frontend-code</mode>
      <message>
      # Task: Implement Dashboard UI with Cloudscape Components
      
      ## Rules
      Follow all the rules for Frontend Code mode, found in markdown files in the folder .roo/rules-frontend-code.
      
      ## Context
      We've designed a new dashboard for our application using AWS Cloudscape Design System. The architecture and data flow have been defined in the decision-records.roo.md file. The UI mockups are available in the design system. The backend API endpoints are already implemented and documented in the API specification.
      
      ## Objective
      Implement the dashboard UI using Cloudscape components, with proper TypeScript typing, responsive design, and comprehensive tests.
      
      ## Requirements
      - Must use AWS Cloudscape Design System components
      - Must implement with React and TypeScript following best practices
      - Must be fully responsive on all device sizes
      - Must implement proper loading states, error handling, and empty states
      - Must be accessible according to WCAG 2.1 AA standards
      - Must include comprehensive tests
      
      ## Deliverables
      - Dashboard page component
      - Supporting UI components (cards, tables, charts, etc.)
      - Integration with backend API
      - Unit and integration tests
      - Documentation of component usage and props
      
      ## Success Criteria
      - Dashboard UI matches the design mockups
      - All components are properly typed with TypeScript
      - UI is responsive on all device sizes
      - Tests pass with >90% coverage
      - Accessibility audit passes with no major issues
      - Code follows project standards and patterns
      
      ## Next Steps
      After implementation, Debug mode will verify the dashboard functionality and performance.
      </message>
      </new_task>

  - name: "Code to Frontend Code Mode"
    example: |
      <new_task>
      <mode>frontend-code</mode>
      <message>
      # Task: Refactor Form Components to Use Cloudscape
      
      ## Rules
      Follow all the rules for Frontend Code mode, found in markdown files in the folder .roo/rules-frontend-code.
      
      ## Context
      Our application currently uses custom form components that don't follow a consistent design system. We've decided to standardize on AWS Cloudscape Design System for all UI components. The backend API endpoints and validation logic remain unchanged.
      
      ## Objective
      Refactor the existing form components to use Cloudscape components, maintaining the same functionality but improving the UI consistency, accessibility, and maintainability.
      
      ## Requirements
      - Replace custom form components with Cloudscape equivalents
      - Maintain existing form validation logic
      - Ensure backward compatibility with existing form data structures
      - Improve accessibility and responsive behavior
      - Add comprehensive tests for the refactored components
      
      ## Deliverables
      - Refactored form components using Cloudscape
      - Updated form validation integration
      - Unit and integration tests
      - Documentation of the refactored components
      
      ## Success Criteria
      - Forms maintain the same functionality as before
      - UI is consistent with other Cloudscape components
      - Forms are accessible according to WCAG 2.1 AA standards
      - Tests pass with >90% coverage
      - No regression in form validation or submission
      
      ## Next Steps
      After refactoring, Debug mode will verify the form functionality and test edge cases.
      </message>
      </new_task>

  - name: "Boomerang to Frontend Code Mode"
    example: |
      <new_task>
      <mode>frontend-code</mode>
      <message>
      # Task: Implement Data Visualization Components
      
      ## Rules
      Follow all the rules for Frontend Code mode, found in markdown files in the folder .roo/rules-frontend-code.
      
      ## Context
      We need to add data visualization capabilities to our application to help users understand their metrics better. The backend API endpoints for retrieving the necessary data are already implemented. We've decided to use AWS Cloudscape Design System for the UI components and a charting library compatible with React.
      
      ## Objective
      Implement a set of reusable data visualization components that integrate with our existing application and follow best practices for React, TypeScript, and Cloudscape.
      
      ## Requirements
      - Create reusable chart components (line, bar, pie, etc.)
      - Integrate with Cloudscape Design System
      - Implement proper loading states, error handling, and empty states
      - Ensure components are responsive and accessible
      - Add comprehensive tests for all components
      - Optimize performance for large datasets
      
      ## Deliverables
      - Reusable chart components
      - Integration examples with existing pages
      - Unit and integration tests
      - Documentation of component usage and props
      - Performance optimization recommendations
      
      ## Success Criteria
      - Charts render correctly with various data inputs
      - Components integrate seamlessly with Cloudscape
      - UI is responsive and accessible
      - Tests pass with >90% coverage
      - Performance is acceptable with large datasets
      
      ## Next Steps
      After implementation, Debug mode will verify the visualization components and test with various data scenarios.
      </message>
      </new_task>

  - name: "Architect to DB Migration Mode"
    example: |
      <new_task>
      <mode>db-migration</mode>
      <message>
      # Task: Migrate Customer Data from MySQL to DynamoDB

      ## Rules
      Follow all the rules for DB Migration mode, found in markdown files in the folder .roo/rules-db-migration.

      ## Context
      Our application currently uses a MySQL database for customer data storage. As part of our move to a more scalable architecture, we've decided to migrate this data to AWS DynamoDB. The customer data includes personal information, purchase history, and preferences. The migration needs to be performed with minimal downtime.

      ## Objective
      Plan and execute the migration of customer data from MySQL to DynamoDB using AWS Database Migration Service (DMS) with Change Data Capture (CDC) to minimize downtime.

      ## Requirements
      - Set up AWS DMS replication instance with appropriate configuration
      - Configure MySQL source with binary logging for CDC
      - Design appropriate DynamoDB table structure with efficient partition and sort keys
      - Create and configure DMS tasks for full load and ongoing replication
      - Monitor the migration process and validate data integrity
      - Document the migration process and any issues encountered

      ## Deliverables
      - DynamoDB table design documentation
      - AWS DMS configuration details
      - Migration execution plan with timeline
      - Validation strategy and results
      - Post-migration cleanup plan
      - Rollback strategy in case of issues

      ## Success Criteria
      - All customer data successfully migrated to DynamoDB
      - Data integrity verified through validation checks
      - Minimal application downtime during cutover
      - Performance metrics for the new DynamoDB implementation
      - Documentation of the migration process for future reference

      ## Next Steps
      After successful migration, Code mode will update the application to use the new DynamoDB data source instead of MySQL.
      </message>
      </new_task>

best_practices:
  clarity_and_specificity:
    - "Be explicit about what needs to be done"
    - "Avoid ambiguity in requirements"
    - "Provide specific examples where helpful"
  
  context_and_background:
    - "Include relevant background information"
    - "Reference existing documentation"
    - "Explain why the task is important"
  
  scope_management:
    - "Clearly define what is in and out of scope"
    - "Break large tasks into manageable pieces"
    - "Set realistic expectations for completion"
  
  success_criteria:
    - "Define what \"done\" looks like"
    - "Include measurable criteria where possible"
    - "Specify any quality standards that must be met"
  
  handoff_and_continuity:
    - "Specify what happens after task completion"
    - "Include information about dependencies"
    - "Indicate who will review or use the deliverables"